// This file has been autogenerated from a class added in the UI designer.

using System;

using TimesSquare.iOS;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.CoreGraphics;
using Cnt.API;
using Cnt.API.Models;
using System.Collections.Generic;
using System.Drawing;

namespace Cnet.iOS
{
	public partial class OSCalendarViewController : UIViewController
	{
		List<Assignment> calendarEvents;

		public OSCalendarViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			// Load calendar view
			var calendarView = new TSQCalendarView (new RectangleF (0, 57, 320, 330)) // x, y, width, height
			{
				Calendar = new NSCalendar (NSCalendarType.Gregorian),
				FirstDate = NSDate.Now,
				LastDate = NSDate.FromTimeIntervalSinceNow (60 * 60 * 24 * 365 * 5),
				BackgroundColor = UIColor.LightTextColor,
				PagingEnabled = true
			};

			calendarView.DidSelectDate += (sender, e) => {
				var netDate = (DateTime) e.Date;
				new UIAlertView ("You selected", netDate.ToLongDateString(), null, "Ok", null).Show ();
			};

			View.Add (calendarView);

			// Populate list for calendar
			Client client = AuthenticationHelper.GetClient ();
			calendarEvents = new List<Assignment> (client.PlacementService.GetCompletedAssignments ());
			this.calendarTable.Source = new OSCalendarTableSource (calendarEvents);

		}

		public class OSCalendarTableSource : UITableViewSource
		{
			private List<Assignment> tableItems;
			static NSString CalendarInfoCellId = new NSString ("CalendarInfoCellIdentifier");
			static NSString CalendarAppointmentCellId = new NSString ("AppointmentCellIdentifier");

			public OSCalendarTableSource(List<Assignment> items) : base()
			{
				tableItems = items;
			}

			public override int RowsInSection (UITableView tableview, int section)
			{
				return tableItems.Count;
			}

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				OSCalendarInfoCell infoCell;
				OSCalendarAppointmentCell appointmentCell;

				switch (indexPath.Row)
				{
					case 0:
					infoCell = (OSCalendarInfoCell)tableView.DequeueReusableCell (CalendarInfoCellId, indexPath);
						return infoCell;

					default:
						appointmentCell = (OSCalendarAppointmentCell)tableView.DequeueReusableCell (CalendarAppointmentCellId, indexPath);
						return appointmentCell;
				}
			}
		}
		
	}
}

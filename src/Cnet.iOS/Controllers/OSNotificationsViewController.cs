// This file has been autogenerated from a class added in the UI designer.

using System;

using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Cnt.API;
using Cnt.API.Exceptions;
using Cnt.Web.API.Models;
using Cnet.Data;

namespace Cnet.iOS
{
	public partial class OSNotificationsViewController : UIViewController
	{
		public OSNotificationsViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			WireUpView ();
			RenderNotifications ();
		}

		#region Private Methods
		private void CloseButtonClicked (object sender, EventArgs e)
		{
			DismissViewController (true, null);

			/*UIView.Animate (
				0.5, // duration
				() => { Alpha = 0; },
				() => { RemoveFromSuperview(); }
			);*/
		}

		private void RenderNotifications ()
		{
			notificationsTable.Source = new OSNotificationTableSource ();
			messagesLabel.Text = NotificationHelper.Notifications.Count.ToString ();
		}

		private void WireUpView ()
		{
			closeButton.TouchUpInside += CloseButtonClicked;
		}
		#endregion

		internal class OSNotificationTableSource : UITableViewSource
		{
			private static NSString OSNotificationsCellId = new NSString ("NotificationsCellIdentifier");

			public OSNotificationTableSource() : base()
			{
			}

			#region Public Methods
			public override int RowsInSection (UITableView tableview, int section)
			{
				return  NotificationHelper.Notifications.Count;
			}

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				var cell = (OSNotificationsCell)tableView.DequeueReusableCell (OSNotificationsCellId, indexPath);

				Notification notification =  NotificationHelper.Notifications [indexPath.Row];

				switch (notification.Type) {
				case "PlacementCreated":
					cell.CloseButton.Hidden = true;
					cell.StatusLabel.TextColor = Utility.NewTextColor;
					break;
				case "PlacementCanceled":
					cell.CloseButton.Hidden = false;
					cell.StatusLabel.TextColor = Utility.CanceledStatusTextColor;
					break;
				case "PlacementUpdate":
					cell.CloseButton.Hidden = false;
					cell.StatusLabel.TextColor = Utility.DefaultTextColor;
					break;
				case "PlacementReminder":
				case "PlacementSubmitTimesheet":
				case "UpdateAvailability":
				case "UpdateProfile":
				default:
					cell.CloseButton.Hidden = true;
					cell.StatusLabel.TextColor = Utility.DefaultTextColor;
					break;
				}

				cell.FamilyNameLabel.Text = notification.Title;
				cell.StatusLabel.Text = notification.Text;
				cell.InfoLabel.Text = notification.Created.ToTimeSinceString ();
				cell.InfoImage.Image = notification.GetInfoImage ();
				cell.ProfileImage.Image = notification.GetProfileImage ();

				return cell;
			}
			#endregion
		}
	}
}

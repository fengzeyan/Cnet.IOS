// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Collections.Generic;
using System.Drawing;
using Cnt.Web.API.Models;
using Cnt.API;
using Cnt.API.Exceptions;

namespace Cnet.iOS
{
	public partial class OSEditProfileViewController : UIViewController
	{
		#region Private Members
		private NSString DoneSegueName = new NSString("Profile");
		private bool hasErrors;
		private List<string> mobileCarriers;
		private User user;
		#endregion

		public OSEditProfileViewController (IntPtr handle) : base (handle)
		{
		}

		#region Public Methods
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			LoadUser ();
			RenderUser ();
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			if (segue.Identifier == DoneSegueName)
				SubmitForm ();
			base.PrepareForSegue (segue, sender);
		}

		public override bool ShouldPerformSegue (string segueIdentifier, NSObject sender)
		{
			if (segueIdentifier == DoneSegueName)
				return !hasErrors;

			return base.ShouldPerformSegue (segueIdentifier, sender);
		}
		#endregion

		#region Event Delegates
		partial void addNewPhonePressed (NSObject sender)
		{
			float frameAdjustment = 161.0f;
			List<UIView> adjustedViewsList = new List<UIView>{
				addPhoneButton, addressLabel, addressTextField, addressLine2TextField,
				cityTextField, stateTextField, zipCodeTextField, addAddressButton,
				emergencyContactLabel, emergencyContactTextField, ecPhoneTextField };

			foreach (UIView view in adjustedViewsList)
			{
				view.AdjustFrame(0, frameAdjustment, 0 ,0);
			}

			// Adjust content size, not frame for scroll view
			SizeF scrollViewContent = editProfileScrollView.ContentSize;
			scrollViewContent.Height += frameAdjustment;
			editProfileScrollView.ContentSize = scrollViewContent;

			// Add new ui elements for phone
			UITextField newPhoneTextField = new UITextField (addPhoneButton.Frame);
			newPhoneTextField.AdjustFrame(0, (-1 * frameAdjustment), 0 ,0);
			UIButton newPhoneCarrierField = new UIButton (newPhoneTextField.Frame);
			newPhoneCarrierField.AdjustFrame(0, 51, 0, 0);
		}

		partial void addAlternateAddressPressed (NSObject sender)
		{
			float frameAdjustment = 241.0f;
			List<UIView> adjustedViewsList = new List<UIView>{ addAddressButton, emergencyContactLabel, emergencyContactTextField, ecPhoneTextField };

			foreach (UIView view in adjustedViewsList)
			{
				view.AdjustFrame(0, frameAdjustment, 0 ,0);
			}

			// Adjust content size, not frame for scroll view
			SizeF scrollViewContent = editProfileScrollView.ContentSize;
			scrollViewContent.Height += frameAdjustment;
			editProfileScrollView.ContentSize = scrollViewContent;
		}
			
		private void PhoneCarrierClick (object sender, EventArgs e)
		{
			ShowCarrierPicker ();
		}
		#endregion

		#region Private Methods
		private void LoadUser()
		{
			Client client = AuthenticationHelper.GetClient ();
			mobileCarriers = new List<string>(client.MobileCarrierService.GetMobileCarriers ());
			user = client.UserService.GetUser (AuthenticationHelper.UserData.UserId);
		}

		private void RenderUser()
		{
			List<UITextField> textFieldList = new List<UITextField> {
				firstNameTextField,
				lastNameTextField,
				emailTextField,
				phoneTextField,
				emergencyContactTextField,
				ecPhoneTextField
			};
			List<UITextField> addressFieldList = new List<UITextField> {
				addressTextField,
				addressLine2TextField,
				cityTextField, 
				stateTextField,
				zipCodeTextField
			};

			List<String> imageNameList = new List<String> {
				"icon-user.png",
				"icon-user.png",
				"icon-mail.png",
				"icon-mobile.png",
				"icon-user.png",
				"icon-phone.png"
			};

			// Indent text/set image in text views here
			for (int i = 0; i < textFieldList.Count; i++) {
				textFieldList [i].AddPadding (40, 24, new UIImage(imageNameList [i]));
			}

			for (int i = 0; i < addressFieldList.Count; i++) {
				addressFieldList [i].AddPadding (10, 24);
			}

			profileImage.Image = user.GetProfileImage ();

			firstNameTextField.Text = user.FirstName;
			lastNameTextField.Text = user.LastName;
			emailTextField.Text = user.Email;
			phoneTextField.Text = user.MobilePhone;

			addressTextField.Text = user.AddressCurrent.Line1;
			addressLine2TextField.Text = user.AddressCurrent.Line2;
			cityTextField.Text = user.AddressCurrent.City;
			stateTextField.Text = user.AddressCurrent.State;
			zipCodeTextField.Text = user.AddressCurrent.Zip;

			emergencyContactTextField.Text = user.EmergencyContactName;
			ecPhoneTextField.Text = user.EmergencyContactPhone;
		}

		private void ShowCarrierPicker()
		{
			var actionSheetCarrierPicker = new ActionSheetListPicker (this.View);
			var pickerDataModel = new ListPickerViewModel<string> (mobileCarriers);
			actionSheetCarrierPicker.ListPicker.Source = pickerDataModel;
			pickerDataModel.ValueChanged += (object sender, EventArgs e) => phoneCarrierLabel.Text= (sender as ListPickerViewModel<string>).SelectedItem;
			actionSheetCarrierPicker.Show ();
		}

		private void SubmitForm()
		{
			user.FirstName = firstNameTextField.Text;
			user.LastName = lastNameTextField.Text;
			user.Email = emailTextField.Text;
			user.MobilePhone = phoneTextField.Text;

			user.AddressCurrent.Line1 = addressTextField.Text;
			user.AddressCurrent.Line2 = addressLine2TextField.Text;
			user.AddressCurrent.City = cityTextField.Text;
			user.AddressCurrent.State = stateTextField.Text;
			user.AddressCurrent.Zip = zipCodeTextField.Text;

			user.EmergencyContactName = emergencyContactTextField.Text;
			user.EmergencyContactPhone = ecPhoneTextField.Text;

			try {
				Client client = AuthenticationHelper.GetClient ();
				client.UserService.UpdateUser(user);
				hasErrors = false;
			} catch (CntResponseException ex) {
				hasErrors = true;
				Utility.ShowError (ex);
			}
		}

		private void WireUpView()
		{
			phoneCarrierButton.TouchUpInside += PhoneCarrierClick;
		}
		#endregion
	}
}

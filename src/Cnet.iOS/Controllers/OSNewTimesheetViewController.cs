// This file has been autogenerated from a class added in the UI designer.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Cnt.API;
using Cnt.API.Exceptions;
using Cnt.Web.API.Models;

namespace Cnet.iOS
{
	// TODO: Figure out timezone stuff.
	// TODO: Wire up reset button.
	// TODO: Add outlet for start and end time to wire up pickers to.
	public partial class OSNewTimesheetViewController : UIViewController
	{
		#region Private Members
		private static NSString timesheetListSegueName = new NSString ("TimesheetList");
		private const string dateFormat = "ddd, MMM d, yyyy";
		private const string timeFormat = "h:mm tt";
		private Timesheet timesheet;
		private bool hasErrors;
		#endregion

		public int PlacementId { get; set; }
		public int TimesheetId{ get; set; }

		public OSNewTimesheetViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			LoadTimesheet ();
			RenderTimesheet ();
		}

		public override bool ShouldPerformSegue (string segueIdentifier, NSObject sender)
		{
			if (segueIdentifier == timesheetListSegueName)
				return !hasErrors;

			return base.ShouldPerformSegue (segueIdentifier, sender);
		}

		#region Event Delegates
		private void ActionButtonClicked (object sender, EventArgs e)
		{
			SubmitForm ();
			if (!hasErrors)
				PerformSegue (timesheetListSegueName, this);
		}

		private void EndButtonClicked (object sender, EventArgs e)
		{
			ShowDatePicker (timesheet.End, UIDatePickerMode.Date, (object s, EventArgs ev) => {
				DateTime date = DateTime.SpecifyKind ((s as UIDatePicker).Date, DateTimeKind.Unspecified);
				timesheet.End = date;
				endLabel.Text = date.ToString (dateFormat);
			});
		}

		private void EndTimeClicked (object sender, EventArgs e)
		{
			ShowDatePicker (timesheet.End, UIDatePickerMode.Time, (object s, EventArgs ev) => {
				DateTime date = DateTime.SpecifyKind ((s as UIDatePicker).Date, DateTimeKind.Unspecified);
				TimeSpan time = new TimeSpan (date.Hour, date.Minute, date.Second);
				timesheet.End = timesheet.End.Date + time;
				endTimeLabel.Text = date.ToString (timeFormat);
			});
		}

		private void EndTimeDownClicked (object sender, EventArgs e)
		{
			DateTime date = DateTime.ParseExact (endTimeLabel.Text, timeFormat, null).AddMinutes (-15);
			TimeSpan time = new TimeSpan (date.Hour, date.Minute, date.Second);
			timesheet.End = timesheet.End.Date + time;
			endTimeLabel.Text = date.ToString (timeFormat);
		}

		private void EndTimeUpClicked (object sender, EventArgs e)
		{
			DateTime date = DateTime.ParseExact (endTimeLabel.Text, timeFormat, null).AddMinutes (15);
			TimeSpan time = new TimeSpan (date.Hour, date.Minute, date.Second);
			timesheet.End = timesheet.End.Date + time;
			endTimeLabel.Text = date.ToString (timeFormat);
		}

		private void ResetButtonClicked (object sender, EventArgs e)
		{
			ResetForm ();
		}

		private void StartButtonClicked (object sender, EventArgs e)
		{
			ShowDatePicker (timesheet.Start, UIDatePickerMode.Date, (object s, EventArgs ev) => {
				DateTime date = DateTime.SpecifyKind ((s as UIDatePicker).Date, DateTimeKind.Unspecified);
				timesheet.Start = date;
				startLabel.Text = date.ToString (dateFormat);
			});
		}

		private void StartTimeClicked (object sender, EventArgs e)
		{
			ShowDatePicker (timesheet.Start, UIDatePickerMode.Time, (object s, EventArgs ev) => {
				DateTime date = DateTime.SpecifyKind ((s as UIDatePicker).Date, DateTimeKind.Unspecified);
				TimeSpan time = new TimeSpan (date.Hour, date.Minute, date.Second);
				timesheet.Start = timesheet.Start.Date + time;
				startTimeLabel.Text = date.ToString (timeFormat);
			});
		}

		private void StartTimeDownClicked (object sender, EventArgs e)
		{
			DateTime date = DateTime.ParseExact (startTimeLabel.Text, timeFormat, null).AddMinutes (-15);
			TimeSpan time = new TimeSpan (date.Hour, date.Minute, date.Second);
			timesheet.Start = timesheet.Start.Date + time;
			startTimeLabel.Text = date.ToString (timeFormat);
		}

		private void StartTimeUpClicked (object sender, EventArgs e)
		{
			DateTime date = DateTime.ParseExact (startTimeLabel.Text, timeFormat, null).AddMinutes (15);
			TimeSpan time = new TimeSpan (date.Hour, date.Minute, date.Second);
			timesheet.Start = timesheet.Start.Date + time;
			startTimeLabel.Text = date.ToString (timeFormat);
		}
		#endregion

		#region Private Methods
		private void LoadTimesheet ()
		{
			Client client = AuthenticationHelper.GetClient ();
			//placement = client.PlacementService.GetPlacement (PlacementId);
			if (TimesheetId > 0)
				timesheet = client.TimesheetService.GetTimesheet (TimesheetId);
			else {
				DateTime startTime = DateTime.Now.RoundToNearest (TimeSpan.FromMinutes (15));
				timesheet = new Timesheet () { 
					Created = DateTime.Now,
					Start = startTime,
					End = startTime.AddHours (1),
					PlacementId = PlacementId
				};
			}
		}

		private void RenderTimesheet ()
		{
			resetButton.Clicked += ResetButtonClicked;
			actionButton.TouchUpInside += ActionButtonClicked;

			DateTime localStart = timesheet.Start;
			DateTime localEnd = timesheet.End;
			startLabel.Text = localStart.ToString (dateFormat);
			endLabel.Text = localEnd.ToString (dateFormat);
			startTimeLabel.Text = localStart.ToString (timeFormat);
			endTimeLabel.Text = localEnd.ToString (timeFormat);
			recapTextView.Text = timesheet.Description;

			startButton.TouchUpInside += StartButtonClicked;
			endButton.TouchUpInside += EndButtonClicked;
			startTimeUpButton.TouchUpInside += StartTimeUpClicked;
			startTimeDownButton.TouchUpInside += StartTimeDownClicked;
			endTimeUpButton.TouchUpInside += EndTimeUpClicked;
			endTimeDownButton.TouchUpInside += EndTimeDownClicked;
			recapTextView.Started += (object sender, EventArgs e) => {
				if (recapTextView.Text == "Tap to add recap...")
					recapTextView.Text = String.Empty;
			};
			recapTextView.Changed += (object sender, EventArgs e) => timesheet.Description = recapTextView.Text;
		}

		private void ResetForm ()
		{
			// TODO: Reset form logic.
		}

		private void ShowDatePicker(DateTime date, UIDatePickerMode mode, EventHandler valueChangedHandler)
		{
			var actionSheetDatePicker = new ActionSheetDatePicker (this.View);
			NSDate nsDate = (NSDate)DateTime.SpecifyKind (date, DateTimeKind.Utc);
			actionSheetDatePicker.DatePicker.Date = nsDate;
			actionSheetDatePicker.DatePicker.Mode = mode;
			actionSheetDatePicker.DatePicker.ValueChanged += valueChangedHandler;
			actionSheetDatePicker.Show ();
		}

		private void SubmitForm()
		{
			try {
				Client client = AuthenticationHelper.GetClient ();
				if (TimesheetId > 0)
					client.TimesheetService.UpdateTimesheet (timesheet);
				else
					client.TimesheetService.AddTimesheet (timesheet);
				hasErrors = false;
			} catch (CntResponseException ex) {
				hasErrors = true;
				Utility.ShowError (ex);
			}
		}
		#endregion
	}
}

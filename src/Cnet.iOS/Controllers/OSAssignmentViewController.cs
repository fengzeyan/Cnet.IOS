// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using MonoTouch.UIKit;
using Cnt.API;
using Cnt.Web.API.Models;
using MonoTouch.Foundation;
using Cnt.API.Models;

namespace Cnet.iOS
{
	public partial class OSAssignmentViewController : UIViewController
	{
		const string AssignmentDetailSegueName = "AssignmentDetail";

		List<Assignment> completedAssignments;
		List<Assignment> upcomingAssignments;

		public List<Assignment> Assignments {
			get { return (Mode == AssignmentType.Completed) ? completedAssignments : upcomingAssignments; }
		}
		public AssignmentType Mode { get; set; }

		public OSAssignmentViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			Client client = AuthenticationHelper.GetClient ();
			completedAssignments = new List<Assignment> (client.PlacementService.GetCompletedAssignments ());
			upcomingAssignments =  new List<Assignment> (client.PlacementService.GetUpcomingAssignments ());
			Mode = AssignmentType.Upcoming;
			this.assignmentsTable.Source = new OSAssignmentTableSource (this);
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);
			if (segue.Identifier == AssignmentDetailSegueName) {
				var indexPath = this.assignmentsTable.IndexPathForSelectedRow;
				var selectedAssignment = Assignments [indexPath.Row];
				var view = (OSUnconfirmedAssignmentViewController)segue.DestinationViewController;
				view.Assignment = selectedAssignment;
			}
		}

		#region Event Delegates
		partial void completedSwitchPressed (UIButton sender)
		{
			this.completedButton.Selected = true;
			this.upcomingButton.Selected = false;
			Mode = AssignmentType.Completed;
			this.assignmentsTable.ReloadData();
		}

		partial void upcomingSwitchPressed (UIButton sender)
		{
			this.upcomingButton.Selected = true;
			this.completedButton.Selected = false;
			Mode = AssignmentType.Upcoming;
			this.assignmentsTable.ReloadData();
		}
		#endregion

		class OSAssignmentTableSource : UITableViewSource
		{
			OSAssignmentViewController controller;
			static NSString OSAssignmentsTableViewCellId = new NSString ("AssignmentsCellIdentifier");

			public OSAssignmentTableSource(OSAssignmentViewController parent) : base()
			{
				controller = parent;
			}

			public override int RowsInSection (UITableView tableview, int section)
			{
				return controller.Assignments.Count;
			}

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				OSAssignmentsTableViewCell cell = (OSAssignmentsTableViewCell)tableView.DequeueReusableCell (OSAssignmentsTableViewCellId, indexPath);

				Assignment assignment = controller.Assignments [indexPath.Row];
				AssignmentStatus status = assignment.GetStatus ();

				DateTime start = assignment.Start;
				DateTime end = start.AddSeconds (assignment.Duration);
				TimeSpan updated = TimeSpan.MinValue;
				string belowProfilePicLabel = String.Empty;
				int childCount = assignment.Placement.Students.Count ();

				switch (status) {
				case AssignmentStatus.New:
					belowProfilePicLabel = "Unconfirmed";
					updated = DateTime.Now.Subtract (start);
					break;
				case AssignmentStatus.Canceled:
					belowProfilePicLabel = "Cancelled";
					break;
				case AssignmentStatus.Confirmed:
					belowProfilePicLabel = "Upcoming";
					break;
				}

				if (childCount > 0)
					cell.ChildrenLabel.Text = (childCount == 1) ? "1 child" : childCount + " children";
				cell.DateLabel.Text = assignment.Start.ToString("ddd d MMM");

				cell.ProfileImage.Image = assignment.GetProfileImage();
				cell.InfoImage.Image = assignment.GetInfoImage();

				string clientName = assignment.Placement.ClientName;
				cell.FamilyNameLabel.Text = clientName.Substring(clientName.LastIndexOf(" ") + 1) + " Family - " + controller.Assignments[indexPath.Row].Placement.SubService;

				cell.LocationLabel.Text = assignment.ToLocationString("{1}, {2}");
				cell.BelowProfilePicLabel.Text = belowProfilePicLabel;

				if (updated > TimeSpan.MinValue) {
					cell.BookmarkImage.Image = new UIImage ("icon-bookmark.png");
					cell.PurpleInfoLabel.Text = (updated.Hours > 0 ? updated.Hours + " hours" : updated.Minutes + " minutes") + " ago";
				} else {
					cell.BookmarkImage.Image = new UIImage ();
					cell.PurpleInfoLabel.Text = (status == AssignmentStatus.TimesheetRequired) ? "Timesheet due" : String.Empty;
				}

				cell.TimeLabel.Text = start.ToString ("h:mmtt").ToLower() + " - " + end.ToString ("h:mmtt").ToLower();
				return cell;
			}
		}
	}
}
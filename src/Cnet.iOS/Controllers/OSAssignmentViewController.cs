// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using MonoTouch.UIKit;
using Cnt.API;
using Cnt.Web.API.Models;
using MonoTouch.Foundation;
using Cnt.API.Models;

namespace Cnet.iOS
{
	public partial class OSAssignmentViewController : UIViewController
	{
		OSAssignmentTableSource completedAssignments;
		OSAssignmentTableSource upcomingAssignments;

		public OSAssignmentViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			Client client = AuthenticationHelper.GetClient ();
			completedAssignments = new OSAssignmentTableSource (OSAssignmentsTableViewCellType.Completed, new List<Assignment> (client.PlacementService.GetCompletedAssignments ()));
			upcomingAssignments = new OSAssignmentTableSource (OSAssignmentsTableViewCellType.Upcoming, new List<Assignment> (client.PlacementService.GetUpcomingAssignments ()));
			this.assignmentsTable.Source = upcomingAssignments;
		}

		partial void completedSwitchPressed (UIButton sender)
		{
			this.completedButton.Selected = true;
			this.upcomingButton.Selected = false;
			this.assignmentsTable.Source = completedAssignments;
			this.assignmentsTable.ReloadData();
		}

		partial void upcomingSwitchPressed (UIButton sender)
		{
			this.upcomingButton.Selected = true;
			this.completedButton.Selected = false;
			this.assignmentsTable.Source = upcomingAssignments;
			this.assignmentsTable.ReloadData();
		}
	}

	public class OSAssignmentTableSource : UITableViewSource
	{
		private OSAssignmentsTableViewCellType tableType;
		private List<Assignment> tableItems;
		static NSString OSAssignmentsTableViewCellId = new NSString ("AssignmentsCellIdentifier");


		public OSAssignmentTableSource(OSAssignmentsTableViewCellType type, List<Assignment> items) : base()
		{
			tableType = type;
			tableItems = items;
		}

		public override int RowsInSection (UITableView tableview, int section)
		{
			return tableItems.Count;
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			OSAssignmentsTableViewCell cell = (OSAssignmentsTableViewCell)tableView.DequeueReusableCell (OSAssignmentsTableViewCellId, indexPath);

			OSAssignmentsTableViewCellStatus status;
			if (tableType == OSAssignmentsTableViewCellType.Upcoming) {
				if (tableItems [indexPath.Row].IsCanceled)
					status = OSAssignmentsTableViewCellStatus.Canceled;
				else if (tableItems [indexPath.Row].Placement.SubServiceCategory == 1 && !tableItems [indexPath.Row].Placement.IsConfirmed)
					status = OSAssignmentsTableViewCellStatus.New;
				else
					status = OSAssignmentsTableViewCellStatus.Confirmed;
			} else
				status = OSAssignmentsTableViewCellStatus.TimesheetRequired;

			DateTime start = tableItems [indexPath.Row].Start;
			DateTime end = start.AddSeconds (tableItems [indexPath.Row].Duration);
			TimeSpan updated = TimeSpan.MinValue;
			string infoImagePath = String.Empty;
			string belowProfilePicLabel = String.Empty;
			int childCount = tableItems [indexPath.Row].Placement.Students.Count ();

			switch (status) {
			case OSAssignmentsTableViewCellStatus.New:
				infoImagePath = "check-off.png";
				belowProfilePicLabel = "Unconfirmed";
				updated = DateTime.Now.Subtract (start);
				break;
			case OSAssignmentsTableViewCellStatus.Canceled:
				infoImagePath = "icon-cancelled.png";
				belowProfilePicLabel = "Cancelled";
				break;
			case OSAssignmentsTableViewCellStatus.Confirmed:
				infoImagePath = "icon-check.png";
				belowProfilePicLabel = "Upcoming";
				break;
			case OSAssignmentsTableViewCellStatus.TimesheetRequired:
				infoImagePath = "check-dollar.png";
				break;
			}

			if (childCount > 0)
				cell.ChildrenLabel.Text = (childCount == 1) ? "1 child" : childCount + " children";
			cell.DateLabel.Text = tableItems [indexPath.Row].Start.ToString("ddd d MMM");
			cell.FamilyNameLabel.Text = tableItems [indexPath.Row].Placement.ClientName + "Family - " + tableItems[indexPath.Row].Placement.SubService;

			cell.InfoImage.Image = new UIImage (infoImagePath);

			Address location = tableItems[indexPath.Row].Placement.Location;
			cell.LocationLabel.Text = location != null ? location.City + ", " + location.State : String.Empty;

			cell.ProfileImage.Image = Utility.UIImageFromUrl(tableItems [indexPath.Row].Placement.ClientPhoto);
			cell.BelowProfilePicLabel.Text = belowProfilePicLabel;

			if (updated > TimeSpan.MinValue) {
				cell.BookmarkImage.Image = new UIImage ("icon-bookmark.png");
				cell.PurpleInfoLabel.Text = (updated.Hours > 0 ? updated.Hours + " hours" : updated.Minutes + " minutes") + " ago";
			} else {
				cell.BookmarkImage.Image = new UIImage ();
				cell.PurpleInfoLabel.Text = (status == OSAssignmentsTableViewCellStatus.TimesheetRequired) ? "Timesheet due" : String.Empty;
			}

			cell.TimeLabel.Text = start.ToString ("h:mmtt").ToLower() + " - " + end.ToString ("h:mmtt").ToLower();
			return cell;
		}
	}

	public enum OSAssignmentsTableViewCellType
	{
		Completed,
		Upcoming
	}

	public enum OSAssignmentsTableViewCellStatus
	{
		None,
		New,
		Confirmed,
		Canceled,
		TimesheetRequired
	}
}
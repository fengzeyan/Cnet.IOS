// This file has been autogenerated from a class added in the UI designer.

using System;

using System.Collections.Generic;
using System.Linq;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Cnt.API;
using Cnt.API.Exceptions;
using Cnt.Web.API.Models;

namespace Cnet.iOS
{
	public partial class OSEditAvailabilityViewController : UIViewController
	{
		#region Private Members
		private static NSString availabilityBlockListSegueName = new NSString ("AvailabilityBlockList");
		private const string dateFormat = "ddd, MMM d, yyyy";
		private const string timeFormat = "h:mm tt";
		private const int defaultStart = 60 * 60 * 7;
		private const int defaultDuration = 60 * 60 * 2;
		private AvailabilityBlock availabilityBlock;
		private List<string> weekDays;
		private List<TimeBlock> times;
		private bool hasErrors;
		#endregion

		public int AvailabilityBlockId { get; set; }

		public OSEditAvailabilityViewController (IntPtr handle) : base (handle)
		{
			weekDays = new List<string> ();
			times = new List<TimeBlock> ();
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			LoadAvailabilityBlock ();
			WireUpView ();
			RenderAvailabilityBlock ();
		}

		#region Event Delegates
		private void AddTimeBlock()
		{
			TimeBlock newTime = new TimeBlock () { Start = defaultStart, Duration = defaultDuration };


			times.Add (newTime);
		}

		private void ActionButtonClicked (object sender, EventArgs e)
		{
			SubmitForm ();
			if (!hasErrors)
				PerformSegue (availabilityBlockListSegueName, this);
		}

		private void DeleteButtonClicked (object sender, EventArgs e)
		{
			UIAlertView alert = new UIAlertView ("Delete Availability", "Are you sure you want to delete this availability?", null, "Cancel", "Confirm");
			alert.Clicked += DeleteConfirmClicked;
			alert.Show ();
		}

		private void DeleteConfirmClicked (object sender, UIButtonEventArgs e)
		{
			if (e.ButtonIndex == 1) {
				DeleteAvailabilityBlock ();
				if (!hasErrors)
					PerformSegue (availabilityBlockListSegueName, this);
			}
		}

		/*private void EndButtonClicked (object sender, EventArgs e)
		{
			DateTime endDate = availabilityBlock.End.HasValue ? availabilityBlock.End.Value : DateTime.Now;
			ShowDatePicker (endDate, UIDatePickerMode.Date, (object s, EventArgs ev) => {
				DateTime date = (s as UIDatePicker).Date.ToDateTime();
				availabilityBlock.End = date.Date;
				endLabel.Text = date.ToString (dateFormat);
			});
		}

		private void EndTimeClicked (object sender, EventArgs e)
		{
			TimeBlock timeBlock = availabilityBlock.Times.First ();
			ShowDatePicker (DateTime.Today.AddSeconds(timeBlock.Start + timeBlock.Duration), UIDatePickerMode.Time, (object s, EventArgs ev) => {
				DateTime date = (s as UIDatePicker).Date.ToDateTime();
				availabilityBlock.Times.First().Duration = (int)date.TimeOfDay.TotalSeconds - availabilityBlock.Times.First().Start;
				endTimeLabel.Text = date.ToString (timeFormat);
			});
		}

		private void EndTimeDownClicked (object sender, EventArgs e)
		{
			DateTime date = DateTime.ParseExact (endTimeLabel.Text, timeFormat, null).AddMinutes (-15);
			TimeSpan time = new TimeSpan (date.Hour, date.Minute, date.Second);
			TimeBlock timeBlock = availabilityBlock.Times.First ();
			availabilityBlock.Times.First().Duration = timeBlock.Start + (int)time.TotalSeconds;
			endTimeLabel.Text = date.ToString (timeFormat);
		}

		private void EndTimeUpClicked (object sender, EventArgs e)
		{
			DateTime date = DateTime.ParseExact (endTimeLabel.Text, timeFormat, null).AddMinutes (15);
			TimeSpan time = new TimeSpan (date.Hour, date.Minute, date.Second);
			TimeBlock timeBlock = availabilityBlock.Times.First ();
			availabilityBlock.Times.First().Duration = timeBlock.Start + (int)time.TotalSeconds;
			endTimeLabel.Text = date.ToString (timeFormat);
		}

		private void StartButtonClicked (object sender, EventArgs e)
		{
			ShowDatePicker (availabilityBlock.Start, UIDatePickerMode.Date, (object s, EventArgs ev) => {
				DateTime date = (s as UIDatePicker).Date.ToDateTime();
				availabilityBlock.Start = date;
				startLabel.Text = date.ToString (dateFormat);
			});
		}

		private void StartTimeClicked (object sender, EventArgs e)
		{
			ShowDatePicker (availabilityBlock.Start, UIDatePickerMode.Time, (object s, EventArgs ev) => {
				DateTime date = (s as UIDatePicker).Date.ToDateTime();
				TimeSpan time = new TimeSpan (date.Hour, date.Minute, date.Second);
				availabilityBlock.Times.First().Start = (int)time.TotalSeconds;
				startTimeLabel.Text = date.ToString (timeFormat);
			});
		}

		private void StartTimeDownClicked (object sender, EventArgs e)
		{
			DateTime date = DateTime.ParseExact (startTimeLabel.Text, timeFormat, null).AddMinutes (-15);
			TimeSpan time = new TimeSpan (date.Hour, date.Minute, date.Second);
			availabilityBlock.Times.First().Start = (int)time.TotalSeconds;
			availabilityBlock.Times.First ().Duration += (int)TimeSpan.FromMinutes (15).TotalSeconds;
			startTimeLabel.Text = date.ToString (timeFormat);
		}

		private void StartTimeUpClicked (object sender, EventArgs e)
		{
			DateTime date = DateTime.ParseExact (startTimeLabel.Text, timeFormat, null).AddMinutes (15);
			TimeSpan time = new TimeSpan (date.Hour, date.Minute, date.Second);
			availabilityBlock.Times.First().Start = (int)time.TotalSeconds;
			availabilityBlock.Times.First ().Duration -= (int)TimeSpan.FromMinutes (15).TotalSeconds;
			startTimeLabel.Text = date.ToString (timeFormat);
		}*/

		private void WeekDayClicked (string weekDay, UIButton sender)
		{
			if (weekDays.Contains (weekDay)) {
				weekDays.Remove (weekDay);
				sender.SetTitleColor (Utility.DisabledTextColor, UIControlState.Normal);
			} else {
				weekDays.Add (weekDay);
				sender.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
			}
			availabilityBlock.Weekdays = String.Join (", ", weekDays);
		}
		#endregion

		#region Private Methods
		private void DeleteAvailabilityBlock ()
		{
			try {
				Client client = AuthenticationHelper.GetClient ();
				client.AvailabilityService.DeleteAvailabilityBlock (AvailabilityBlockId);
				hasErrors = false;
			} catch (CntResponseException ex) {
				hasErrors = true;
				Utility.ShowError (ex);
			}
		}

		private void LoadAvailabilityBlock ()
		{
			try {
				Client client = AuthenticationHelper.GetClient ();
				availabilityBlock = client.AvailabilityService.GetAvailabilityBlock (AvailabilityBlockId);
				string weekDaysString = availabilityBlock.Weekdays
					.Replace ("Weekdays", "Monday, Tuesday, Wednesday, Thursday, Friday")
					.Replace ("Weekend", "Sunday, Saturday")
					.Replace ("All", "Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday");
				weekDays = new List<string> (Array.ConvertAll (weekDaysString.Split (new char[]{ ',' }, StringSplitOptions.RemoveEmptyEntries), p => p.Trim ()));
				times = new List<TimeBlock> (availabilityBlock.Times);
				if (times == null || times.Count () == 0)
					times = new List<TimeBlock> (new TimeBlock[]{ new TimeBlock (){ Start = defaultStart, Duration = defaultDuration} });

				times.Add(new TimeBlock() { Start = defaultStart, Duration = defaultDuration});
				times.Add(new TimeBlock() { Start = defaultStart, Duration = defaultDuration});
				times.Add(new TimeBlock() { Start = defaultStart, Duration = defaultDuration});
				times.Add(new TimeBlock() { Start = defaultStart, Duration = defaultDuration});
			} catch (CntResponseException ex) {
				Utility.ShowError (ex);
			}
		}

		private void RenderAvailabilityBlock ()
		{
			availabillityTable.Source = new OSEditAvailabilityDetailSource (this);
		}

		private void ShowDatePicker(DateTime date, UIDatePickerMode mode, EventHandler valueChangedHandler)
		{
			var actionSheetDatePicker = new ActionSheetDatePicker (this.View);
			actionSheetDatePicker.DatePicker.Date = date.ToNSDate();
			actionSheetDatePicker.DatePicker.Mode = mode;
			actionSheetDatePicker.DatePicker.ValueChanged += valueChangedHandler;
			actionSheetDatePicker.Show ();
		}

		private void SubmitForm ()
		{
			try {
				Client client = AuthenticationHelper.GetClient ();
				client.AvailabilityService.UpdateAvailabilityBlock (availabilityBlock);
				hasErrors = false;
			} catch (CntResponseException ex) {
				hasErrors = true;
				Utility.ShowError (ex);
			}
		}

		private void WireUpView ()
		{
			actionButton.TouchUpInside += ActionButtonClicked;
			deleteButton.TouchUpInside += DeleteButtonClicked;

			/*startButton.TouchUpInside += StartButtonClicked;
			endButton.TouchUpInside += EndButtonClicked;

			startTimeButton.TouchUpInside += StartTimeClicked;
			startTimeUpButton.TouchUpInside += StartTimeUpClicked;
			startTimeDownButton.TouchUpInside += StartTimeDownClicked;
			endTimeButton.TouchUpInside += EndTimeClicked;
			endTimeUpButton.TouchUpInside += EndTimeUpClicked;
			endTimeDownButton.TouchUpInside += EndTimeDownClicked;

			sundayButton.TouchUpInside += (object sender, EventArgs e) => WeekDayClicked ("Sunday", (UIButton)sender);
			mondayButton.TouchUpInside += (object sender, EventArgs e) => WeekDayClicked ("Monday", (UIButton)sender);
			tuesdayButton.TouchUpInside += (object sender, EventArgs e) => WeekDayClicked ("Tuesday", (UIButton)sender);
			wednesdayButton.TouchUpInside += (object sender, EventArgs e) => WeekDayClicked ("Wednesday", (UIButton)sender);
			thursdayButton.TouchUpInside += (object sender, EventArgs e) => WeekDayClicked ("Thursday", (UIButton)sender);
			fridayButton.TouchUpInside += (object sender, EventArgs e) => WeekDayClicked ("Friday", (UIButton)sender);
			saturdayButton.TouchUpInside += (object sender, EventArgs e) => WeekDayClicked ("Saturday", (UIButton)sender);*/

			// TODO: Wireup Add Time Block button.
		}
		#endregion

		private class OSEditAvailabilityDetailSource : UITableViewSource
		{
			#region Private Members
			private OSEditAvailabilityViewController controller;
			private static NSString AvailabilityDatesCellId = new NSString ("AvailabilityDatesCellIdentifier");
			private static NSString AvailabilityTimesCellId = new NSString ("AvailabilityTimesCellIdentifier");
			#endregion

			public OSEditAvailabilityDetailSource(OSEditAvailabilityViewController parent) : base()
			{
				controller = parent;
			}

			#region Public Methods
			public override int RowsInSection (UITableView tableview, int section)
			{
				return 1 + controller.times.Count;
			}

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				UITableViewCell cell = new UITableViewCell ();
				switch (indexPath.Row) {
				case 0: // Dates
					cell = tableView.DequeueReusableCell (AvailabilityDatesCellId, indexPath);
					RenderDatesCell ((OSAvailabilityDatesCell)cell);
					break;
				default: // Times
					cell = tableView.DequeueReusableCell (AvailabilityTimesCellId, indexPath);
					RenderTimesCell ((OSAvailabilityTimesCell)cell, indexPath.Row);
					break;
				}

				return cell;
			}

			public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
			{
				switch (indexPath.Row) {
				case 0: // Dates
					return 185;
				default: // Times
					return 205; //160;
				}
			}
			#endregion

			private void RenderDatesCell (OSAvailabilityDatesCell cell)
			{
				cell.StartLabel.Text = controller.availabilityBlock.Start.ToString (dateFormat);
				cell.EndLabel.Text = controller.availabilityBlock.End.HasValue ? controller.availabilityBlock.End.Value.ToString (dateFormat) : "--";

				foreach (string weekDay in controller.weekDays) {
					switch (weekDay) {
					case "Sunday":
						cell.SundayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Monday":
						cell.MondayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Tuesday":
						cell.TuesdayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Wednesday":
						cell.WednesdayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Thursday":
						cell.ThursdayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Friday":
						cell.FridayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Saturday":
						cell.SaturdayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					}
				}
			}

			private void RenderTimesCell (OSAvailabilityTimesCell cell, int row)
			{
				TimeBlock timeBlock = controller.times [row - 1];
				DateTime startTime = DateTime.Today.AddSeconds (timeBlock.Start);
				cell.StartTimeLabel.Text = startTime.ToString (timeFormat);
				cell.EndTimeLabel.Text = startTime.AddSeconds (timeBlock.Duration).ToString (timeFormat);
			}
		}
	}
}

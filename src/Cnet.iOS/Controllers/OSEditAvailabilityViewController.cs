// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Cnt.API;
using Cnt.API.Exceptions;
using Cnt.Web.API.Models;

namespace Cnet.iOS
{
	public partial class OSEditAvailabilityViewController : UIViewController
	{
		#region Private Members
		private static NSString availabilityBlockListSegueName = new NSString ("AvailabilityBlockList");
		private const string dateFormat = "ddd, MMM d, yyyy";
		private const string timeFormat = "h:mm tt";
		private const int defaultStart = 60 * 60 * 7;
		private const int defaultDuration = 60 * 60 * 2;
		private bool hasErrors;
		#endregion

		internal AvailabilityBlock AvailabilityBlock{ get; set; }
		internal List<string> WeekDays{ get; set; }
		internal List<TimeBlock> Times{ get; set; }
		public int AvailabilityBlockId { get; set; }
		public DateTime Start { get; set; }
		public DateTime End { get; set; }

		public OSEditAvailabilityViewController (IntPtr handle) : base (handle)
		{
			WeekDays = new List<string> ();
			Times = new List<TimeBlock> ();
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			LoadAvailabilityBlock ();
			WireUpView ();
			RenderAvailabilityBlock ();
		}

		#region Event Delegates
		private void ActionButtonClicked (object sender, EventArgs e)
		{
			SubmitForm ();
			if (!hasErrors)
				PerformSegue (availabilityBlockListSegueName, this);
		}

		private void AddTimeBlockButtonClicked (object sender, EventArgs e)
		{
			AddTimeBlock ();
		}

		private void DeleteButtonClicked (object sender, EventArgs e)
		{
			UIAlertView alert = new UIAlertView ("Delete Availability", "Are you sure you want to delete this availability?", null, "Cancel", "Confirm");
			alert.Clicked += DeleteConfirmClicked;
			alert.Show ();
		}

		private void DeleteConfirmClicked (object sender, UIButtonEventArgs e)
		{
			if (e.ButtonIndex == 1) {
				DeleteAvailabilityBlock ();
				if (!hasErrors)
					PerformSegue (availabilityBlockListSegueName, this);
			}
		}
		#endregion

		#region Private Methods
		private void AddTimeBlock ()
		{
			TimeBlock newTime = new TimeBlock () { Start = defaultStart, Duration = defaultDuration };
			Times.Add (newTime);
			availabillityTable.ReloadData ();
		}

		private void DeleteAvailabilityBlock ()
		{
			try {
				Client client = AuthenticationHelper.GetClient ();
				client.AvailabilityService.DeleteAvailabilityBlock (AvailabilityBlockId);
				hasErrors = false;
			} catch (CntResponseException ex) {
				hasErrors = true;
				Utility.ShowError (ex);
			}
		}

		internal void DeleteTimeBlock(int rowIndex){
			Times.RemoveAt (rowIndex);
			availabillityTable.ReloadData ();
		}

		private void LoadAvailabilityBlock ()
		{
			if (AvailabilityBlockId > 0) {
				try {
					Client client = AuthenticationHelper.GetClient ();
					AvailabilityBlock = client.AvailabilityService.GetAvailabilityBlock (AvailabilityBlockId);
					string weekDaysString = AvailabilityBlock.Weekdays
					.Replace ("Weekdays", "Monday, Tuesday, Wednesday, Thursday, Friday")
					.Replace ("Weekend", "Sunday, Saturday")
					.Replace ("All", "Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday");
					WeekDays = new List<string> (Array.ConvertAll (weekDaysString.Split (new char[]{ ',' }, StringSplitOptions.RemoveEmptyEntries), p => p.Trim ()));
					Times = new List<TimeBlock> (AvailabilityBlock.Times);
				} catch (CntResponseException ex) {
					Utility.ShowError (ex);
				}
			} else {
				Times.Add (new TimeBlock () { Start = defaultStart, Duration = defaultDuration });
				AvailabilityBlock = new AvailabilityBlock () {
					UserId = AuthenticationHelper.UserData.UserId,
					Start = Start,
					End = End,
					Times = Times
				};
			}
		}

		private void RenderAvailabilityBlock ()
		{
			availabillityTable.Source = new OSEditAvailabilityDetailSource (this);
		}

		private void SubmitForm ()
		{
			AvailabilityBlock.Times = Times;
			AvailabilityBlock.Weekdays = String.Join (", ", WeekDays);
			try {
				Client client = AuthenticationHelper.GetClient ();
				client.AvailabilityService.UpdateAvailabilityBlock (AvailabilityBlock);
				hasErrors = false;
			} catch (CntResponseException ex) {
				hasErrors = true;
				Utility.ShowError (ex);
			}
		}

		private void WireUpView ()
		{
			addTimeBlockButton.TouchUpInside += AddTimeBlockButtonClicked;
			actionButton.TouchUpInside += ActionButtonClicked;
			if (AvailabilityBlockId > 0)
				deleteButton.TouchUpInside += DeleteButtonClicked;
			else {
				deleteButton.Hidden = true;
				availabillityTable.AdjustFrame (0, 0, 0, 45);
				addTimeBlockButton.AdjustFrame (0, 45, 0, 0);
				actionButton.AdjustFrame (0, 45, 0, 0);
			}
		}
		#endregion

		private class OSEditAvailabilityDetailSource : UITableViewSource
		{
			#region Private Members
			private OSEditAvailabilityViewController controller;
			private static NSString AvailabilityDatesCellId = new NSString ("AvailabilityDatesCellIdentifier");
			private static NSString AvailabilityTimesCellId = new NSString ("AvailabilityTimesCellIdentifier");
			#endregion

			public OSEditAvailabilityDetailSource (OSEditAvailabilityViewController parent) : base ()
			{
				controller = parent;
			}

			#region Public Methods
			public override int RowsInSection (UITableView tableview, int section)
			{
				return 1 + controller.Times.Count;
			}

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				UITableViewCell cell = new UITableViewCell ();
				switch (indexPath.Row) {
				case 0: // Dates
					cell = tableView.DequeueReusableCell (AvailabilityDatesCellId, indexPath);
					RenderDatesCell ((OSAvailabilityDatesCell)cell);
					break;
				default: // Times
					cell = tableView.DequeueReusableCell (AvailabilityTimesCellId, indexPath);
					RenderTimesCell ((OSAvailabilityTimesCell)cell, indexPath.Row);
					break;
				}

				return cell;
			}

			public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
			{
				switch (indexPath.Row) {
				case 0: // Dates
					return 185;
				default: // Times
					return 220;
				}
			}
			#endregion

			#region Private Methods
			private void RenderDatesCell (OSAvailabilityDatesCell cell)
			{
				cell.StartLabel.Text = controller.AvailabilityBlock.Start.ToString (dateFormat);
				cell.EndLabel.Text = controller.AvailabilityBlock.End.HasValue ? controller.AvailabilityBlock.End.Value.ToString (dateFormat) : "--";

				foreach (string weekDay in controller.WeekDays) {
					switch (weekDay) {
					case "Sunday":
						cell.SundayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Monday":
						cell.MondayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Tuesday":
						cell.TuesdayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Wednesday":
						cell.WednesdayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Thursday":
						cell.ThursdayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Friday":
						cell.FridayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					case "Saturday":
						cell.SaturdayButton.SetTitleColor (Utility.NewTextColor, UIControlState.Normal);
						break;
					}
				}

				cell.InitEventHandlers (controller);
			}

			private void RenderTimesCell (OSAvailabilityTimesCell cell, int row)
			{
				cell.RowIndex = row - 1;

				DateTime startTime = DateTime.Today.AddSeconds (controller.Times [cell.RowIndex].Start);
				cell.StartTimeLabel.Text = startTime.ToString (timeFormat);
				cell.EndTimeLabel.Text = startTime.AddSeconds (controller.Times [cell.RowIndex].Duration).ToString (timeFormat);

				cell.InitEventHandlers (controller);
			}
			#endregion
		}
	}
}
